1:HL["/_next/static/css/982ca6dcc310d465.css",{"as":"style"}]
0:[[["",{"children":["blog",{"children":[["board","3","d"],{"children":[["post","5","d"],{"children":["__PAGE__?{\"board\":\"3\",\"post\":\"5\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/982ca6dcc310d465.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"9487","chunks":["185:static/chunks/app/layout-fe06cd55157d695a.js"],"name":"","async":false}
5:I{"id":"9544","chunks":["272:static/chunks/webpack-d20714a13e2effcf.js","667:static/chunks/2443530c-843a899f2bba8eb6.js","139:static/chunks/139-2d122f65c95cff8e.js"],"name":"","async":false}
6:I{"id":"99","chunks":["272:static/chunks/webpack-d20714a13e2effcf.js","667:static/chunks/2443530c-843a899f2bba8eb6.js","139:static/chunks/139-2d122f65c95cff8e.js"],"name":"","async":false}
3:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
2:[["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":["$","div",null,{"className":"space-y-4 text-vercel-pink","children":[["$","h2",null,{"className":"text-lg font-bold","children":"Not Found"}],["$","p",null,{"className":"text-sm","children":"Could not find requested resource"}]]}],"notFoundStyles":[],"asNotFound":"$undefined","childProp":{"current":["$L7",null],"segment":"blog"},"styles":[]}],"params":{}}],null]
7:["$","div",null,{"children":["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,200px),min(860px,100%),1fr] gap-x-4","children":[["$","div",null,{"className":"col-start-2","children":"$L8"}],["$","div",null,{"className":"col-start-3 space-y-6","children":["$","div",null,{"className":"rounded-xl bg-black p-12","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","3","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","3","d"],"children",["post","5","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$L9",null],"segment":"__PAGE__?{\"board\":\"3\",\"post\":\"5\"}"},"styles":[]}],"segment":["post","5","d"]},"styles":[]}],"segment":["board","3","d"]},"styles":[]}]}]}]]}]}]
a:I{"id":"3328","chunks":["89:static/chunks/89-2de24114e72159e2.js","988:static/chunks/app/blog/[board]/[post]/page-dbc0cc440c6b81fb.js"],"name":"Markdown","async":false}
b:I{"id":"414","chunks":["414:static/chunks/414-0659ba873c8de01b.js","431:static/chunks/app/blog/[board]/page-fde8c58f64e7a16f.js"],"name":"","async":false}
9:[["$","div",null,{"className":"pb-4 text-5xl font-bold text-gray-200","children":"학생 커뮤니티 사이트 제작 (4) - React와 Express 연동"}],["$","div",null,{"className":"mb-12 text-gray-400","children":"2021. 8. 11."}],["$","$La",null,{"children":"\r\n<br>\r\n\r\n연동하는 두 가지 방법을 찾았다.\r\n\r\n- Express의 view 부분을 React로 만든 HTML로 대체\r\n- React 서버와 Express 서버를 연동\r\n\r\n<br>\r\n<br>\r\n\r\n# 1. Express의 view를 React로\r\n\r\n내가 처음 생각했던 방법은 이 방법이었다.\r\nExpress 만으로도 충분히 웹을 만들 수 있었기 때문이다.\r\nExpress를 배울 때, HTML 파일을 통해 페이지를 render 하는 것을 보고 이 부분만 React로 바꿔주면 된다고 생각했다.\r\n\r\n그런데 구글링을 해 보니 대부분 React와 Express 서버를 각각 실행하고 둘을 연동하는 방법이 대부분이었다.\r\n서버를 두 개나 실행하지 않고 한 개로 해결하고 싶어서 더 알아봤는데 당장 사용하기는 힘들어보였다.\r\n\r\n방법은 React로 작업을 완성하고 build한 뒤 Express의 view로 설정해 주는 것이다.\r\n자세히 알아보지는 않았지만 React 파일이 수정될 때마다 다시 build를 해서 Express로 옮겨줘야 될 것 같았다.\r\n나는 React를 작업하면서 동시에 Express를 만들 것이기 때문에 이 방법은 넘어갔다.\r\n\r\n> 나중에 실제로 배포할 때가 되면 자세히 알아보려고 한다.\r\n\r\n<br>\r\n<br>\r\n<br>\r\n\r\n# 2. React 서버와 Express 서버를 연동\r\n\r\n구글링 해서 나온 결과가 대부분 이 방법이라서 따라하는 데 어려움이 없었다.\r\n처음에는 복잡하게 느껴졌지만 막상 해보니 간단하고 원리도 어렵지 않았다.\r\n\r\n이 방법을 사용하면 React 서버와 Express 서버가 모두 켜져야 한다.\r\n사용자는 url을 통해 React 서버로 접속한다.\r\nReact 서버는 사용자가 요청한 정보를 돌려줘야 하는데, 이 때 필요한 내용을 Express 서버에 요청하는 방식이다.\r\nReact는 Express에서 받은 정보를 화면에 그린 뒤 사용자에게 돌려준다.\r\n\r\n그러기 위해서는 React와 Express 서버를 별도의 포트로 켜고, React의 package.json에 프록시를 추가해야 한다.\r\nReact와 Express 모두 기본적으로 3000번 포트를 사용하는데, 둘 중 하나를 다른 포트로 바꿔주면 된다.\r\n<br><br>\r\n\r\n## React 포트 변경하기\r\n\r\nReact의 포트를 변경하는 방법은 여러가지가 있다.\r\n\r\n<br>\r\n\r\n### 1) 명령어로 실행하기\r\n\r\n명령어에 포트 번호를 지정하여 서버를 실행시키는 방법이다.\r\n기본값인 3000번 포트는 설정 파일에 저장되어 있으므로 이 방법은 일회성인 방법이다.\r\n\r\n    > PORT=3001 npm start\r\n\r\n<br>\r\n검색해보니 위 명령어를 사용하면 된다고 하는데, 내 컴퓨터(윈도우)에서는 실행이 되지 않는다.\r\npowershell과 cmd 둘 다 되지 않았다.\r\n아마 linux의 명령어인 것 같다.\r\n\r\ncmd에서는 아래 명령은 가능했다.\r\n\r\n    > set PORT=3001 && npm start\r\n\r\n> 왜 안되는지 알려면 powershell과 cmd에 대해 공부해야 할 것 같다.\r\n\r\n<br>\r\n어쨌든 성공적으로 실행되었다면 React 서버를 열 때 나오는 문구가 똑같이 뜬다.\r\n\r\n```\r\nCompiled successfully!\r\n\r\nYou can now view client in the browser.\r\n\r\n  Local:            http://localhost:3001\r\n  On Your Network:  http://192.168.219.109:3001\r\n\r\nNote that the development build is not optimized.\r\nTo create a production build, use yarn build.\r\n```\r\n\r\n포트 번호가 3001로 바뀐 것을 확인할 수 있다.\r\n\r\n<br>\r\n\r\n### 2) package.json 수정하기\r\n\r\nReact 서버를 실행시킬 때는 `npm start` 명령을 이용하는데, 이 때 무슨 명령을 실행할 지가 `package.json`에 저장되어 있다.\r\n\r\n```json\r\n\"scripts\": {\r\n    \"start\": \"react-scripts start\",\r\n    ...\r\n}\r\n```\r\n\r\n이것이 기본 설정이다.\r\n`npm start`를 실행하면 `react-scripts start`라는 명령이 실행된다는 뜻이다.\r\n여기에 포트 번호를 지정해주면 앞으로 `npm start`를 쓸 때마다 지정된 포트로 열리게 된다.\r\n\r\n#### Windows\r\n\r\n```json\r\n\"scripts\": {\r\n    \"start\": \"set PORT=3001 && react-scripts start\",\r\n    ...\r\n}\r\n```\r\n\r\n#### Linux, Mac OS\r\n\r\n```json\r\n\"scripts\": {\r\n    \"start\": \"export PORT=3001 && react-scripts start\",\r\n    ...\r\n}\r\n```\r\n\r\n> 이 방법이 가장 사용하기 편리한 것 같다.\r\n\r\n<br>\r\n\r\n### 3) .env 파일 생성하기\r\n\r\n프로젝트 폴더에 \".env\"라는 이름의 파일을 생성한다.\r\n파일에 원하는 포트 번호를 적고 `npm start`를 실행시키면 된다.\r\n\r\n.env 파일\r\n\r\n    PORT=3001\r\n\r\n<br>\r\n명령어 실행\r\n\r\n    > npm start\r\n\r\n<br>\r\n\r\n### 4) 포트 설정 변경하기\r\n\r\n3000번으로 설정된 기본 설정값을 변경하는 것이다.\r\n\r\n프로젝트 폴더의 `node_modules/react-scripts/scripts/start.js` 파일에 설정값이 있다.\r\n\r\n```js\r\nconst DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3001;\r\nconst HOST = process.env.HOST || '0.0.0.0';\r\n```\r\n\r\n`DEFAULT_PORT`의 맨 오른쪽 숫자를 원하는 포트 번호로 바꿔주면 된다.\r\n\r\n<br>\r\n<br>\r\n\r\n## Express 포트 변경하기\r\n\r\nExpress의 포트를 바꾸는 방법은 간단하다.\r\n명령어로 포트를 지정해서 실행해도 되지만 설정 파일을 쉽게 찾을 수 있다.\r\n\r\n프로젝트 폴더의 `bin/www` 파일에 설정값이 있다.\r\n\r\n```js\r\nvar port = normalizePort(process.env.PORT || '3001');\r\napp.set('port', port);\r\n```\r\n\r\n`port`의 맨 오른쪽 숫자를 원하는 포트 번호로 바꿔주면 된다.\r\n\r\n나는 React는 3000번으로 놔두고, Express를 3001번으로 바꿔서 사용했다.\r\n\r\n<br>\r\n<br>\r\n\r\n## React의 package.json에 프록시 추가하기\r\n\r\nReact 프로젝트 폴더의 `package.json` 파일에서 프록시를 추가할 수 있다.\r\n\r\n```json\r\n\"proxy\": \"http://localhost:3001\"\r\n```\r\n\r\n이렇게 하면 React에서 정보를 요청할 때 Express 서버(3001번 포트)로 요청하게 된다.\r\n예를 들어, React에서 `/users`로 요청을 보내면 `http://localhost:3001/users`로 요청이 간다.\r\n\r\n<br>\r\n<br>\r\n\r\n## 간단하게 정보 주고받기\r\n\r\nExpress에서 텍스트 정보를 받아와 React로 출력하는 페이지를 간단하게 만들어 보았다.\r\n\r\n<br>\r\nExpress의 `app.js`\r\n\r\n```js\r\nimport usersRouter from './routes/users';\r\n\r\napp.use('/users', usersRouter);\r\n```\r\n\r\n라우터를 통해 `/users`로 들어온 요청을 `./routes/users.js`로 보낸다.\r\n\r\n<br>\r\nExpress의 `/routes/users.js`\r\n\r\n```js\r\nrouter.get('/', function (req, res, next) {\r\n  res.json({\r\n    title: 'Users Page',\r\n    content: 'User Info',\r\n  });\r\n});\r\n```\r\n\r\nGET 방식으로 요청이 들어오면 위의 json 파일을 돌려준다.\r\n\r\n<br>\r\nReact의 `/src/App.js`\r\n\r\n```jsx\r\nclass App extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    title: null,\r\n    content: null,\r\n    data: [],\r\n  };\r\n\r\n  async getUsers() {\r\n    const res = await axios.get('/users');\r\n    this.setState({\r\n      isLoading: false,\r\n      title: res.data.title,\r\n      content: res.data.content,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUsers();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, title, content } = this.state;\r\n    return (\r\n      <div>\r\n        {isLoading ? (\r\n          <div>Loading...</div>\r\n        ) : (\r\n          <div>\r\n            <h1>{title}</h1>\r\n            <p>{content}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nReact 서버 주소(http://localhost:3000)로 접속하면 React는 `/users`에서 정보를 받아 화면에 출력한다.\r\n이 때 `/users`의 주소는 `package.json`의 프록시 주소를 기반으로 한다.\r\n결과적으로 `http://localhost:3001/users`에 요청하는 것이다.\r\n\r\n<br>\r\n위 코드를 실행한 결과\r\n\r\n![image](https://user-images.githubusercontent.com/86853786/129202000-2224916b-4b46-4600-bc56-c9502ad75a60.png)\r\n\r\n<br>\r\n<br>\r\n\r\n내가 이해한 작동 순서는 다음과 같다.\r\n\r\n1. 사용자가 React 서버에 접속한다.\r\n2. React는 App 컴포넌트를 그린다.\r\n3. 그리는 과정에서 Express 서버에 `/users`로 정보를 요청한다.\r\n4. Express 서버는 `/users`에 해당하는 라우터로 이동하여 json을 돌려준다.\r\n5. React는 받은 json을 이용하여 화면을 다시 그린다.\r\n6. 사용자가 페이지를 확인한다.\r\n\r\n<br>\r\n<br>\r\n<br>\r\n\r\n# 3. 서버 분리는 어떻게?\r\n\r\n기본적인 것들을 만들고 보니 순서가 좀 이상하다.\r\n백엔드는 외부 api와 연결하려고 했는데, 그러면 프론트는 백엔드로 api 요청을 하고 백엔드는 외부로 api 요청을 한다.\r\n이럴거면 React에서 외부 api를 바로 이용하는 것보다 나을 게 없어 보인다.\r\n물론 최종적으로 만드려는 앱은 하루에 한 번씩 백엔드 서버에 정보를 가공해서 저장되는 형태이지만 다른 방법이 필요하다.\r\n\r\n> 내가 작성한 코드는 순서가 사용자-프론트엔드-백엔드 순이다.\r\n> 그러나 React와 Express를 이용하여 사용자-백엔드-프론드엔드 순으로도 구성할 수 있다고 한다.\r\n> 나중에 알아보자.\r\n\r\n공부하면서 이해한 대로 적은 것이므로 잘못된 정보가 있을 수 있습니다.\r\n"}],";"]
8:["$","div",null,{"className":"space-y-5","children":[["$","div","Linux",{"children":[["$","div",null,{"className":"text-small mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":["$","div",null,{"children":"Linux"}]}],[["$","$Lb","1",{"href":"/blog/1","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"basic"}],["$","span",null,{"className":"text-gray-400","children":["(",7,")"]}]]}]],["$","div",null,{"className":"mb-6"}]]}],["$","div","Web",{"children":[["$","div",null,{"className":"text-small mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":["$","div",null,{"children":"Web"}]}],[["$","$Lb","2",{"href":"/blog/2","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"Github pages"}],["$","span",null,{"className":"text-gray-400","children":["(",15,")"]}]]}],["$","$Lb","3",{"href":"/blog/3","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"PC Community"}],["$","span",null,{"className":"text-gray-400","children":["(",8,")"]}]]}],["$","$Lb","4",{"href":"/blog/4","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"온라인 명륜당"}],["$","span",null,{"className":"text-gray-400","children":["(",0,")"]}]]}]],["$","div",null,{"className":"mb-6"}]]}]]}]
