1:HL["/_next/static/css/461c8a9bf57c3ebb.css",{"as":"style"}]
0:[[["",{"children":["blog",{"children":[["board","Github-pages","d"],{"children":[["post","2021-08-24-10-liquid","d"],{"children":["__PAGE__?{\"board\":\"Github-pages\",\"post\":\"2021-08-24-10-liquid\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/461c8a9bf57c3ebb.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"9487","chunks":["185:static/chunks/app/layout-006ff9e5c3a0979e.js"],"name":"","async":false}
5:I{"id":"9544","chunks":["272:static/chunks/webpack-765bd21d5766fc77.js","667:static/chunks/2443530c-843a899f2bba8eb6.js","139:static/chunks/139-2d122f65c95cff8e.js"],"name":"","async":false}
6:I{"id":"99","chunks":["272:static/chunks/webpack-765bd21d5766fc77.js","667:static/chunks/2443530c-843a899f2bba8eb6.js","139:static/chunks/139-2d122f65c95cff8e.js"],"name":"","async":false}
3:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
2:[["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":["$","div",null,{"className":"space-y-4 text-vercel-pink","children":[["$","h2",null,{"className":"text-lg font-bold","children":"Not Found"}],["$","p",null,{"className":"text-sm","children":"Could not find requested resource"}]]}],"notFoundStyles":[],"asNotFound":"$undefined","childProp":{"current":["$L7",null],"segment":"blog"},"styles":[]}],"params":{}}],null]
7:["$","div",null,{"children":["$","div",null,{"className":"my-10 grid grid-cols-[1fr,minmax(auto,200px),min(860px,100%),1fr] gap-x-4","children":[["$","div",null,{"className":"col-start-2","children":"$L8"}],["$","div",null,{"className":"col-start-3 space-y-6","children":["$","div",null,{"className":"rounded-xl bg-black p-12","children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","Github-pages","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children",["board","Github-pages","d"],"children",["post","2021-08-24-10-liquid","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$L9",null],"segment":"__PAGE__?{\"board\":\"Github-pages\",\"post\":\"2021-08-24-10-liquid\"}"},"styles":[]}],"segment":["post","2021-08-24-10-liquid","d"]},"styles":[]}],"segment":["board","Github-pages","d"]},"styles":[]}]}]}]]}]}]
a:I{"id":"6636","chunks":["89:static/chunks/89-2de24114e72159e2.js","988:static/chunks/app/blog/[board]/[post]/page-36c9747ca7bdb651.js"],"name":"Markdown","async":false}
b:I{"id":"414","chunks":["414:static/chunks/414-0659ba873c8de01b.js","431:static/chunks/app/blog/[board]/page-fde8c58f64e7a16f.js"],"name":"","async":false}
9:[["$","div",null,{"className":"pb-4 text-5xl font-bold text-gray-200","children":"Github Pages로 블로그 만들기 (10) - Liquid 문법"}],["$","div",null,{"className":"pb-4 text-gray-400","children":"2021. 8. 11."}],["$","$La",null,{"children":"\r\nJekyll은 페이지의 HTML을 만들 때 Liquid라는 언어를 사용한다. Liquid를 알면 `minimal-mistakes`에서 기본적으로 제공하는 레이아웃을 내가 원하는 대로 수정할 수 있다. 다음에는 사이드 바에 네비게이션을 만들건데, Liquid를 알아야만 해서 Liquid를 먼저 소개한다.\r\n\r\n자세한 내용은 아래 사이트 참고.\r\n\r\n> [Liquid](https://shopify.github.io/liquid/)\r\n\r\n<br><br><br>\r\n\r\n# 1. 시작\r\n\r\nLiquid는 **객체**(objects), **태그**(tags), **필터**(filters)로 이루어져 있다.\r\n\r\n## 객체 Objects\r\n\r\n객체는 정보를 담고 있다. 객체를 출력하기 위해서는 {% raw %}`{{ }}`{% endraw %}로 감싸주면 된다.\r\n\r\n```r\r\n{% raw %}{{ page.title }}{% endraw %}    # page.title을 화면에 출력\r\n```\r\n\r\n```\r\n{{ page.title }}\r\n```\r\n\r\n> `page.title`은 이 글의 마크다운을 작성할 때 Front Matter에 적은 `title`값을 의미한다. 따라서 이 글의 제목이 출력되었다.\r\n\r\n## 태그 Tags\r\n\r\n태그는 프로그램 흐름 제어나 변수 할당을 위해 사용된다. {% raw %}`{% %}`{% endraw %}로 감싸주면 된다. 여기에 들어있는 것은 HTML을 렌더링할 때 사용할 뿐, 화면에 출력되지는 않는다.\r\n\r\n```r\r\n{% raw %}{% if true %}    # 조건이 true일 때 page.title을 출력\r\n  {{ page. title }}\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n```\r\n{% if true %}{{ page. title }}{% endif %}\r\n```\r\n\r\n## 필터 Filters\r\n\r\n필터는 객체나 변수의 출력을 바꿔주는 기능이다. 파이썬의 메소드같은 역할이다. {% raw %}`{{ }}`{% endraw %} 안에서 사용하고, 필터는 `|`로 구분한다.\r\n\r\n예를 들어, `size`는 문자열의 문자 개수나 배열의 길이를 반환하는 필터이다.\r\n\r\n```r\r\n{% raw %}{{ page.title | size }}           # String\r\n{{ \"Hello world\" | size }}        # String\r\n\r\n{% assign names = \"Tom,Bob,James\" | split: ',' %}\r\n# names = [\"Tom\", \"Bob\", \"James\"]\r\n{{ names | size }}    # Array{% endraw %}\r\n```\r\n\r\n```\r\n{{ page.title | size }}\r\n{{ \"Hello world\" | size }}\r\n{% assign names = \"Tom,Bob,James\" | split: ',' %}{{ names | size }}\r\n```\r\n\r\n---\r\n\r\n# 2. 연산자 Operators\r\n\r\n## 기본 연산자\r\n\r\n| `==` | 같다 |\r\n| `!=` | 같지 않다 |\r\n| `>` | 크다 |\r\n| `<` | 작다 |\r\n| `>=` | 크거나 같다 |\r\n| `<=` | 작거나 같다 |\r\n| `or` | 논리연산자 '또는' |\r\n| `and` | 논리연산자 '그리고' |\r\n\r\n## contains\r\n\r\n`contains`는 문자열이 특정 문자열을 포함하고 있는지 확인한다.\r\n\r\n```r\r\n{% raw %}{% if \"Hello world\" contains \"world\" %}\r\n  true\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n```\r\n{% if \"Hello world\" contains \"world\" %}true{% endif %}\r\n```\r\n\r\n<br><br>\r\n\r\n`contains`는 문자열로 이루어진 배열에 특정 문자열이 있는지도 확인한다.\r\n\r\n```r\r\n{% raw %}{% assign greeting = \"Hello,world\" | split: ',' %}    # [\"Hello\", \"world\"]라는 배열 생성\r\n{% if greeting contains \"world\" %}\r\n  true\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n```\r\n{% assign greeting = \"Hello,world\" | split: ',' %}{% if greeting contains \"world\" %}true{% endif %}\r\n```\r\n\r\n## 논리 연산 순서\r\n\r\n태그에 `and`나 `or`가 한 개 이상 들어있다면 연산 순서는 항상 오른쪽에서 왼쪽으로 간다. 소괄호를 사용해서 순서를 바꿀 수 없다.\r\n\r\n```r\r\n{% raw %}{% if true and false and false or true %}\r\n  This evaluates to false, since the tags are checked like this:\r\n\r\n  true and (false and (false or true))\r\n  true and (false and true)\r\n  true and false\r\n  false\r\n\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n---\r\n\r\n# 3. 자료형 Types\r\n\r\nLiquid에는 6개의 자료형이 있다.\r\n\r\n- String\r\n- Number\r\n- Boolean\r\n- Nil\r\n- Array\r\n- EmptyDrop\r\n\r\n## String\r\n\r\nString은 `'`나 `\"`로 표현한다.\r\n\r\n```r\r\n{% raw %}{% assign my_string = \"Hello World!\" %}{% endraw %}\r\n```\r\n\r\n## Number\r\n\r\nNumber는 정수와 실수를 포함한다.\r\n\r\n```r\r\n{% raw %}{% assign my_int = 25 %}\r\n{% assign my_float = -39.756 %}{% endraw %}\r\n```\r\n\r\n## Boolean\r\n\r\nBoolean에는 `true`와 `false`가 있다.\r\n\r\n```r\r\n{% raw %}{% assign foo = true %}\r\n{% assign bar = false %}{% endraw %}\r\n```\r\n\r\n## Nil\r\n\r\nNil은 Liquid 코드 실행의 결과가 없을 때 생기는 빈 값이다. 코드를 작성할 때 코드에 `nil`을 직접 표기할 수 없다. `nil`은 false로 간주한다.\r\n\r\n```r\r\n{% raw %}{% if no_value %}    # no_value는 선언하지 않았다.\r\n  true\r\n{% else %}\r\n  false\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n```\r\n{% if no_value %}true{% else %}false{% endif %}\r\n```\r\n\r\n<br><br>\r\n\r\n```r\r\n{% raw %}{% if page %}                          # page는 존재하는 변수이므로 if문 내부가 실행된다.\r\n  Print page.abcd : {{ page.abcd }}    # page.abcd는 존재하지 않아 nil이 반환된다.\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n```\r\n{% if page %}Print page.abcd : {{ page.abcd }}{% endif %}\r\n```\r\n\r\n## Array\r\n\r\nArray는 어떤 자료형이든 담을 수 있다.\r\n\r\n### 생성\r\n\r\nArray를 초기화하는 문법은 없다. 하지만 `split` 필터를 이용하면 문자열 배열은 만들 수 있다.\r\n\r\n```r\r\n{% raw %}{% assign users = \"Tom,Bob,James,John\" | split: '.' %}{% endraw %}\r\n```\r\n\r\n### 접근\r\n\r\n`[ ]`를 사용하여 배열의 요소에 접근할 수 있다. 인덱스는 0부터 시작하고, 음수는 배열의 끝에서부터 역순으로 센다.\r\n\r\n```r\r\n{% raw %}{% assign users = \"Tom,Bob,James,John\" | split: '.' %}\r\n{{ users[0] }}\r\n{{ users[1] }}\r\n{{ users[-1] }}\r\n{{ users[-2] }}{% endraw %}\r\n```\r\n\r\n```\r\n{% assign users = \"Tom,Bob,James,John\" | split: ',' %}{{ users[0] }}\r\n{{ users[1] }}\r\n{{ users[-1] }}\r\n{{ users[-2] }}\r\n```\r\n\r\n## EmptyDrop\r\n\r\nEmptyDrop은 삭제된 객체에 접근할 때 반환되는 객체이다.\r\n\r\n```r\r\n{% raw %}{% assign variable = \"hello\" %}\r\n{% assign page_1 = pages[variable] %}\r\n{% assign page_2 = pages[\"does-not-exist\"] %}\r\n{% assign page_3 = pages.this-handle-does-not-exist %}{% endraw %}\r\n```\r\n\r\n`page_1`, `page_2`, `page_3`은 모두 EmptyDrop 객체이다.\r\n\r\n### EmptyDrop인지 확인하기\r\n\r\n객체를 `empty`와 비교하여 객체가 EmptyDrop인지 확인할 수 있다.\r\n\r\n```r\r\n{% raw %}{% unless pages == empty %}\r\n  제목 : {{ page.title }}\r\n  카테고리 : {{ page.categories }}\r\n{% endunless %}{% endraw %}\r\n```\r\n\r\n```\r\n{% unless pages == empty %}제목 : {{ page.title }}\r\n카테고리 : {{ page.categories }}{% endunless %}\r\n```\r\n\r\n빈 문자열이나 빈 배열도 `empty`와 비교하면 `true`가 나온다.\r\n\r\n---\r\n\r\n# 4. 참과 거짓 Truthy and falsy\r\n\r\nLiquid에서는 `nil`과 `false`를 제외한 모든 값은 `true`이다. 빈 문자열과 빈 배열, 0, EmptyDrop도 모두 `true`이다.\r\n\r\n|              | truthy | falsy |\r\n| ------------ | :----: | :---: |\r\n| true         |   •    |       |\r\n| false        |        |   •   |\r\n| nil          |        |   •   |\r\n| string       |   •    |       |\r\n| empty string |   •    |       |\r\n| 0            |   •    |       |\r\n| integer      |   •    |       |\r\n| float        |   •    |       |\r\n| array        |   •    |       |\r\n| empty array  |   •    |       |\r\n| page         |   •    |       |\r\n| EmptyDrop    |   •    |       |\r\n\r\n---\r\n\r\n# 5. 조건문 Control flow\r\n\r\n## if\r\n\r\n조건이 `true`일 때 해당 블럭을 실행한다.\r\n\r\n```r\r\n{% raw %}{% if page.title == \"Github Pages\" %}\r\n  This page is \"Github Pages\".\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n## unless\r\n\r\n`if`의 반대이다. 조건이 충족되지 않으면 해당 블럭을 실행한다.\r\n\r\n```r\r\n{% raw %}{% unless page.title == \"Github Pages\" %}\r\n  This page is \"Github Pages\".\r\n{% endunless %}{% endraw %}\r\n```\r\n\r\n## elsif / else\r\n\r\n`if`와 `unless`에 조건을 추가할 수 있다.\r\n\r\n```r\r\n{% raw %}{% if page.title == \"Github Pages\" %}\r\n  This page is \"Github Pages\".\r\n{% elsif page.title == \"git\" %}\r\n  This page is \"git\".\r\n{% endif %}{% endraw %}\r\n```\r\n\r\n## case / when\r\n\r\n스위치문을 만든다. 마지막에 `else`를 넣어서 해당하는 조건이 없을 때 실행할 블럭을 만들 수 있다.\r\n\r\n```r\r\n{% raw %}{% case handle %}\r\n  {% when \"cake\" %}\r\n     This is a cake\r\n  {% when \"cookie\", \"biscuit\" %}\r\n     This is a cookie\r\n  {% else %}\r\n     This is not a cake nor a cookie\r\n{% endcase %}{% endraw %}\r\n```\r\n\r\n---\r\n\r\n# 6. 반복문 Iteration\r\n\r\n반복문의 기본 형태는 다음과 같다.\r\n\r\n```r\r\n{% raw %}{% for item in iterable_object %}\r\n  statements\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n<br><br>\r\n\r\n```r\r\n{% raw %}{% assign fruits = \"Apple,Banana,Cherry,Orange,Strawberry\" | split: ',' %}\r\n# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {{ fruit }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% assign fruits = \"Apple,Banana,Cherry,Orange,Strawberry\" | split: ',' %}{% for fruit in fruits %}{{ fruit }} {% endfor %}\r\n```\r\n\r\n## else\r\n\r\n`else` 아래 블럭은 루프의 길이가 0일 때 실행되는 부분이다.\r\n\r\n```r\r\n{% raw %}{% assign emptystring = \"\" %}\r\n\r\n{% for character in emptystring %}\r\n  {{ character }}\r\n{% else %}\r\n  String is empty.\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% assign emptystring = \"\" %}{% for character in emptystring %}{{ character }}{% else %}String is empty.{% endfor %}\r\n```\r\n\r\n## break\r\n\r\n`break`가 실행되면 반복문을 멈춘다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {% if fruit == \"Orange\" %}    # Orange를 만나면 즉시 중지한다.\r\n    {% break %}\r\n  {% else %}\r\n    {{ fruit }}\r\n  {% endif %}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits %}{% if fruit == \"Orange\" %}{% break %}{% else%}{{ fruit }} {% endif%}{% endfor %}\r\n```\r\n\r\n## continue\r\n\r\n`continue`가 실행되면 다음 반복으로 넘어간다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {% if fruit == \"Orange\" %}    # Orange를 만나면 다음 과일로 넘어간다.\r\n    {% continue %}\r\n  {% else %}\r\n    {{ fruit }}\r\n  {% endif %}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits %}{% if fruit == \"Orange\" %}{% continue %}{% else%}{{ fruit }} {% endif%}{% endfor %}\r\n```\r\n\r\n## limit\r\n\r\n루프의 반복 횟수를 제한한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits limit:2 %}    # 루프를 2번만 실행한다.\r\n  {{ fruit }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits limit:2 %}{{ fruit }} {% endfor %}\r\n```\r\n\r\n## offset\r\n\r\n루프의 시작 지점을 설정한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits offset:2 %}    # 루프를 2번만 실행한다.\r\n  {{ fruit }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits offset:2 %}{{ fruit }} {% endfor %}\r\n```\r\n\r\n<br>\r\n\r\n`offset`에 `continue`를 넣으면 이전 반복문에서 마지막으로 사용한 항목에 이어서 반복한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits limit:2 %}    # 루프를 2번만 실행한다.\r\n  {{ fruit }}\r\n{% endfor %}\r\n\r\n{% for fruit in fruits offset:continue %}    # 3번째 항목부터 이어서 시작한다.\r\n  {{ fruit }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits limit:2 %}{{ fruit }} {% endfor %}\r\n{% for fruit in fruits offset:continue %}{{ fruit }} {% endfor %}\r\n```\r\n\r\n## range\r\n\r\n`range`는 iterable한 연속된 자연수의 객체를 만든다.\r\n\r\n    (a..b)\r\n\r\n`a` ~ `b`까지의 자연수가 들어있다. `b`도 포함한다. 숫자 대신 변수를 사용해도 된다.\r\n\r\n<br>\r\n\r\n```r\r\n{% raw %}{% for i in (3..6) %}\r\n  {{ i }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for i in (3..6) %}{{ i }} {% endfor %}\r\n```\r\n\r\n## reversed\r\n\r\n`reversed`는 루프의 순서를 거꾸로 뒤집는다. 필터의 `reverse`와는 별개이다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits reversed %}\r\n  {{ fruit }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits reversed %}{{ fruit }} {% endfor %}\r\n```\r\n\r\n## forloop 객체\r\n\r\n`forloop` 객체는 자신의 부모 `for` 루프의 여러 속성들을 가지고 있다.\r\n\r\n### forloop.first\r\n\r\n첫번째 루프일 때 `true`를 반환한다. 첫번째가 아닐 때는 `false`를 반환한다.\r\n\r\n```r\r\n{% raw %}{% for i in (1..4) %}\r\n  {% if forloop.first %}\r\n    This is first loop.\r\n  {% else %}\r\n    {{ i }}\r\n  {% endif %}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\nThis is first loop.\r\n2\r\n3\r\n4\r\n```\r\n\r\n### forloop.last\r\n\r\n마지막 루프일 때 `true`를 반환한다. 마지막이 아닐 때는 `false`를 반환한다.\r\n\r\n```r\r\n{% raw %}{% for i in (1..4) %}\r\n  {% if forloop.last %}\r\n    This is last loop.\r\n  {% else %}\r\n    {{ i }}\r\n  {% endif %}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n1\r\n2\r\n3\r\nThis is last loop.\r\n```\r\n\r\n### forloop.length\r\n\r\n루프의 반복 횟수를 반환한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {% if forloop.first %}\r\n    There are {{ forloop.length }} fruits.\r\n  {% endif %}\r\n  {{ fruit }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\nThere are 5 fruits.\r\nApple\r\nBanana\r\nCherry\r\nOrange\r\nStrawberry\r\n```\r\n\r\n### forloop.index\r\n\r\n현재 루프의 인덱스를 반환한다. `1`부터 시작한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {{ forloop.index }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits %}{{ forloop.index }} {% endfor %}\r\n```\r\n\r\n### forloop.index0\r\n\r\n현재 루프의 인덱스를 반환한다. `0`부터 시작한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {{ forloop.index0 }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits %}{{ forloop.index0 }} {% endfor %}\r\n```\r\n\r\n### forloop.rindex\r\n\r\n현재 루프의 인덱스를 뒤집어서 반환한다. `1`부터 시작한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {{ forloop.rindex }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits %}{{ forloop.index }} {% endfor %}\r\n```\r\n\r\n### forloop.rindex0\r\n\r\n현재 루프의 인덱스를 뒤집어서 반환한다. `0`부터 시작한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% for fruit in fruits %}\r\n  {{ forloop.rindex0 }}\r\n{% endfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits %}{{ forloop.index0 }} {% endfor %}\r\n```\r\n\r\n---\r\n\r\n# 7. 변수 Variable\r\n\r\n## assign\r\n\r\n새로운 변수에 값을 할당한다.\r\n\r\n```r\r\n{% raw %}{% assign my_boolean = true %}\r\n{% assign my_number = 3 %}\r\n{% assign my_string = \"Hello world\" %}{% endraw %}\r\n```\r\n\r\n## capture\r\n\r\n새로운 변수를 만들어 `capture` 태그 안의 내용을 할당한다. 문자열 형태로 저장된다.\r\n\r\n```r\r\n{% raw %}{% capture my_variable %}I am being captured.{% endcapture %}\r\n{{ my_variable }}{% endraw %}\r\n```\r\n\r\n```\r\nI am being captured.\r\n```\r\n\r\n## increment\r\n\r\n새 변수를 `0`으로 만든다. `increment`문을 실행할 때마다 현재 값을 먼저 출력하고 `1`씩 증가시킨다.\r\n\r\n```r\r\n{% raw %}{% increment my_inc_counter %}\r\n{% increment my_inc_counter %}\r\n{% increment my_inc_counter %}\r\nmy_inc_counter: {{ my_inc_counter }}{% endraw %}\r\n```\r\n\r\n```\r\n{% increment my_inc_counter %}\r\n{% increment my_inc_counter %}\r\n{% increment my_inc_counter %}\r\nmy_inc_counter: {{ my_inc_counter }}\r\n```\r\n\r\n<br>\r\n\r\n이미 선언된 변수를 대상으로 할 경우, 변수의 값은 변하지 않는다. `increment`문이 출력하는 값은 `increment`문을 호출한 순서이다. `0`부터 시작한다.\r\n\r\n```r\r\n{% raw %}{% assign inc_var = 10 %}\r\n{% increment inc_var %}\r\n{% increment inc_var %}\r\n{% increment inc_var %}\r\ninc_var: {{ inc_var }}{% endraw %}\r\n```\r\n\r\n```\r\n{% assign inc_var = 10 %}{% increment inc_var %}\r\n{% increment inc_var %}\r\n{% increment inc_var %}\r\ninc_var: {{ inc_var }}\r\n```\r\n\r\n## decrement\r\n\r\n새 변수를 `0`으로 만든다. `decrement`문을 실행할 때마다 먼저 `1`씩 감소시키고 감소한 값을 출력한다. `increment`와는 차이가 있다.\r\n\r\n```r\r\n{% raw %}{% decrement my_dec_counter %}\r\n{% decrement my_dec_counter %}\r\n{% decrement my_dec_counter %}\r\nmy_dec_counter: {{ my_dec_counter }}{% endraw %}\r\n```\r\n\r\n```\r\n{% decrement my_dec_counter %}\r\n{% decrement my_dec_counter %}\r\n{% decrement my_dec_counter %}\r\nmy_dec_counter: {{ my_dec_counter }}\r\n```\r\n\r\n<br>\r\n\r\n`increment`와 비슷하다. 변수의 값은 변하지 않는다. `decrement`문을 호출할 때마다 `-1`부터 숫자가 하나씩 낮아진다.\r\n\r\n```r\r\n{% raw %}{% assign dec_var = 10 %}\r\n{% decrement dec_var %}\r\n{% decrement dec_var %}\r\n{% decrement dec_var %}\r\ndec_var: {{ dec_var }}{% endraw %}\r\n```\r\n\r\n```\r\n{% assign dec_var = 10 %}{% decrement dec_var %}\r\n{% decrement dec_var %}\r\n{% decrement dec_var %}\r\ndec_var: {{ dec_var }}\r\n```\r\n\r\n---\r\n\r\n# 8. 템플릿 Template\r\n\r\n## comment\r\n\r\n주석을 작성하는 태그이다.\r\n\r\n```r\r\n{% raw %}{% comment %}이 사이는 주석으로 처리된다.{% endcomment %}{% endraw %}\r\n```\r\n\r\n## raw\r\n\r\nLiquid 태그를 그대로 텍스트로 출력하고 싶을 때 사용한다. `raw` 태그 안에 있는 Liquid 문법은 실행되지 않고 텍스트가 된다.\r\n\r\n```r\r\n{% raw %}{% raw %}\r\n  {% comment %}\r\n    이 사이는 주석으로 처리된다.\r\n  {% endcomment %}\r\n  {{ page.title }}\r\n{% endraw {% endraw %}{% raw %}%}{% endraw %}\r\n```\r\n\r\n## liquid (5.0.0)\r\n\r\n여러 개의 태그를 하나의 {% raw %}`{% %}`{% endraw %}로 처리할 수 있다.\r\n\r\n```r\r\n{% raw %}{% liquid\r\ncase section.blocks.size\r\nwhen 1\r\n  assign column_size = ''\r\nwhen 2\r\n  assign column_size = 'one-half'\r\nwhen 3\r\n  assign column_size = 'one-third'\r\nelse\r\n  assign column_size = 'one-quarter'\r\nendcase %}{% endraw %}\r\n```\r\n\r\n## echo (5.0.0)\r\n\r\n{% raw %}`{{ }}`{% endraw %}와 같지만, `liquid` 태그 내에서 사용한다.\r\n\r\n```r\r\n{% raw %}# fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Strawberry\"]\r\n\r\n{% liquid\r\nfor fruit in fruits\r\n  echo fruit\r\n  echo \" \"\r\nendfor %}{% endraw %}\r\n```\r\n\r\n```\r\n{% for fruit in fruits %}{{ fruit }} {% endfor %}\r\n```\r\n\r\n## render (5.0.0)\r\n\r\n현재 페이지에 다른 템플릿을 삽입한다.\r\n\r\n```r\r\n{% raw %}{% render \"template-name\" %}{% endraw %}\r\n```\r\n\r\n<br>\r\n\r\n삽입할 템플릿에 매개변수를 넘겨줄 수도 있다.\r\n\r\n```r\r\n{% raw %}{% assign my_variable = \"apples\" %}\r\n{% render \"name\", my_variable: my_variable, my_other_variable: \"oranges\" %}{% endraw %}\r\n```\r\n\r\n## include\r\n\r\n`render`와 같은 기능이지만 이전 버전에서 사용한다. `5.0.0` 이상에서는 `render`를 사용하면 된다.\r\n\r\n## Liquid 업데이트 하기\r\n\r\n`minimal mistakes`를 복사해오니 버전이 `4.0.3`이었다. 버전 업데이트를 위해 `Gemfile`에 다음 줄을 추가해준다.\r\n\r\n```js\r\ngem \"liquid\", \"~> 5.0.0\"\r\n```\r\n\r\n<br>\r\n\r\n그리고 이 명령을 실행하면 Liquid가 업데이트된다.\r\n\r\n    > bundle update liquid\r\n\r\n> Liquid 버전 업데이트는 Github Pages에서는 적용되지 않았다. 로컬 환경에서는 사용할 수 있지만 Github에도 적용할 수 있는지는 모르겠다. 일단은 안쓰는게 좋을 것 같다.\r\n\r\n---\r\n\r\n# 9. 필터 Filters\r\n\r\n필터는 많지만 자주 사용할 것 같은 필터만 정리해봤다.\r\n\r\n## append\r\n\r\n## capitalize\r\n\r\n## compact\r\n\r\n배열에서 `nil`값을 제거한다.\r\n\r\n## concat\r\n\r\n## date\r\n\r\n## default\r\n\r\n## downcase\r\n\r\n## first\r\n\r\n## join\r\n\r\n## last\r\n\r\n## map\r\n\r\n## prepend\r\n\r\n## remove\r\n\r\n## remove_first\r\n\r\n## replace\r\n\r\n## replace_first\r\n\r\n## reverse\r\n\r\n## size\r\n\r\n## slice\r\n\r\n## sort\r\n\r\n## sort_natural\r\n\r\n## split\r\n\r\n## strip\r\n\r\n## truncate\r\n\r\n## uniq\r\n\r\n## upcase\r\n\r\n## where\r\n"}],";"]
8:["$","div",null,{"className":"space-y-5","children":[["$","div","Linux",{"children":[["$","div",null,{"className":"text-small mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":["$","div",null,{"children":"Linux"}]}],[["$","$Lb","basic",{"href":"/blog/basic","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"basic"}],["$","span",null,{"className":"text-gray-400","children":["(",7,")"]}]]}]],["$","div",null,{"className":"mb-6"}]]}],["$","div","Web",{"children":[["$","div",null,{"className":"text-small mb-1 px-3 font-semibold tracking-wider text-zinc-400","children":["$","div",null,{"children":"Web"}]}],[["$","$Lb","Github-pages",{"href":"/blog/Github-pages","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"Github-pages"}],["$","span",null,{"className":"text-gray-400","children":["(",15,")"]}]]}],["$","$Lb","Online-mnd",{"href":"/blog/Online-mnd","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"Online-mnd"}],["$","span",null,{"className":"text-gray-400","children":["(",0,")"]}]]}],["$","$Lb","PC-Community",{"href":"/blog/PC-Community","className":"block rounded-md px-3 py-1 text-sm font-medium text-white hover:bg-zinc-800 hover:text-zinc-100","children":[["$","span",null,{"className":"pr-1.5","children":"PC-Community"}],["$","span",null,{"className":"text-gray-400","children":["(",8,")"]}]]}]],["$","div",null,{"className":"mb-6"}]]}]]}]
